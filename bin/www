#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server');
const http = require('http');
const ws = require('ws');
const ChatRoomController = require('../app/controllers/ChatRoomController');

var port = normalizePort(process.env.PORT || '3000');

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const wss = new ws.Server({ server });
app.set('wss', wss);
wss.on('connection', function(ws, req) {
  app.set('wss', wss);
});

// wss.on('connection', function(ws, req) {
//   const pathname = url.parse(req.url).pathname;
//   if (pathname === '/chatrooms') {
//     ChatRoomController.connection(wss, ws, req)
//   } else if (pathname === '/chatroom') {
//     ChatController.connection(wss, ws, req)
//   }
// });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
}
